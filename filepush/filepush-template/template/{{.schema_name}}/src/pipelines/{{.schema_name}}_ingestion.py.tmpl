import dlt
from dbruntime.dbutils import FileInfo
import re
import os

# Dynamic Tables
def sanitize_table_name(name: str) -> str:
  """
  Sanitize a table name.
  - Lowercase
  - Replace non [a-z0-9_] with underscores
  - Ensure it doesn't start with a digit
  """
  n = name.strip().lower()
  n = re.sub(r"[^a-z0-9_]", "_", n)
  if re.match(r"^[0-9]", n):
    n = f"t_{n}"
  n = re.sub(r"_+", "_", n).strip("_")
  return n or "t_unnamed"

def is_valid_table_name(name: str) -> bool:
  """
  Validate a table name.
  - Must be alphanumeric
  - Must not start with a digit
  - Must not contain any special characters
  """
  pat = re.compile(r'^[A-Za-z0-9_]+$')
  return pat.match(name) is not None

def dbfs_is_dir(f: FileInfo):
  is_dir_attr = getattr(f, "isDir", None)
  return is_dir_attr() if callable(is_dir_attr) else f.name.endswith("/")

def list_immediate_subdirs(path: str):
  items = dbutils.fs.ls(path)
  out = []
  for f in items:
    if dbfs_is_dir(f):
      # f.name often ends with '/', drop it for a clean folder name
      clean_name = f.name[:-1] if f.name.endswith("/") else f.name
      if is_valid_table_name(clean_name):
        out.append((clean_name, f.path.removeprefix('dbfs:')))
      else:
        print(f"Skipping invalid table name: {clean_name}. It must be alphanumeric connected by underscores and not start with a digit.")
  return out

def make_dlt_table(subdir_name: str, subdir_path: str):
  """
  Defines a DLT table for a given subfolder at import time.
  If table does not exist, it will create a read_files kernel and use that to create the table.
  """
  table_name = sanitize_table_name(subdir_name)
  kernel_file_name = f"./{{.schema_name}}_{table_name}_readfiles_kernel.sql"

  if not os.path.exists(kernel_file_name):
    print(f"Initialize table {table_name}")
    with open(f"./{{.schema_name}}_readfiles_kernel.sql", "r") as f:
      kernel_query_fmt = f.read()
    with open(kernel_file_name, "w") as f:
      table_kernel_query = kernel_query_fmt % subdir_path
      f.write(table_kernel_query)

  if len(dbutils.fs.ls(subdir_path)) > 0:
    @dlt.table(
      name=table_name,
      comment=f"Auto-created from subfolder: {subdir_path} (streaming via Auto Loader)",
      table_properties={
        "volume_path": f"{subdir_path}"
      }
    )
    def _auto_loader_table():
      with open(kernel_file_name, "r") as f:
        table_kernel_query = f.read()
      print(table_kernel_query.replace("read_files(", "STREAM read_files("))
      return spark.sql(table_kernel_query.replace("read_files(", "STREAM read_files("))
  else:
    print(f"Waiting for files to land in {subdir_path}")

volume_path_root = spark.conf.get("volume_path")
for subdir_name, subdir_path in list_immediate_subdirs(volume_path_root):
  make_dlt_table(subdir_name, subdir_path)