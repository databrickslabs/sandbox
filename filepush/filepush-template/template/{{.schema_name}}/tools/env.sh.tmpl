#!/usr/bin/env bash
# This file is used to set the environment variables for the filepush bundle.
# It is sourced by the other scripts in the tools directory.
# This should be deployed **after** the bundle is deployed.

# Prevent running directly; this file must be *sourced*
(return 0 2>/dev/null) || { echo "Source this file:  . $(basename "$0")"; exit 1; }

# Idempotent guard
# Check if the environment is already set and non-empty
if [[ -n "${_FILEPUSH_ENV_LOADED:-}" ]]; then
  return 0
fi
export _FILEPUSH_ENV_LOADED=1

# Sets the target for the bundle
ARG_TARGET="dev"
ARG_POSITIONAL=()

while [[ $# -gt 0 ]]; do
case "$1" in
    --target)   [[ $# -ge 2 ]] || { echo "Error: --target needs a value"; return 2; }
                ARG_TARGET="$2"; shift 2 ;;
    --target=*) ARG_TARGET="${1#*=}"; shift ;;
    -t)         [[ $# -ge 2 ]] || { echo "Error: -t needs a value"; return 2; }
                ARG_TARGET="$2"; shift 2 ;;
    --)         shift; ARG_POSITIONAL+=("$@"); break ;;
    -h|--help)  usage; return 1 ;;
    -*)         echo "Unknown option: $1"; usage; return 2 ;;
    *)          ARG_POSITIONAL+=("$1"); shift ;;
esac
done

export BUNDLE_TARGET=$ARG_TARGET

summary=$(databricks bundle summary -t $BUNDLE_TARGET --output json)
export FILEPUSH_BUNDLE_NAME={{.schema_name}}
export FILEPUSH_CATALOG_NAME={{.catalog_name}}
export FILEPUSH_SCHEMA_NAME=$(echo $summary | jq -r '.resources.schemas.{{.schema_name}}.name')
export FILEPUSH_VOLUME_PATH=/Volumes/{{.catalog_name}}/${FILEPUSH_SCHEMA_NAME}/{{.schema_name}}_volume/
export FILEPUSH_PIPELINE_ID=$(echo $summary | jq -r '.resources.pipelines.{{.schema_name}}_pipeline.id')
export FILEPUSH_JOB_NAME={{.schema_name}}_job
